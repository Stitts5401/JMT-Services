host:
  gateway: http://localhost:8282/api/v1
server:
  port: 8090
logging:
  level:
    org:
      springframework:
        web: DEBUG
        cloud:
          gateway:
            route:
              RouteDefinitionRouteLocator: INFO
            gateway: TRACE
        security: DEBUG
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: DEBUG
keycloak:
  client:
    id: jmt-client
    secret: 4EpTbwg7S5dTfgtICsQGevVYhUMdzC7Z
  logout:
    url: http://host.docker.internal:8080/auth/realms/jmt_realm/protocol/openid-connect/logout
spring:
  application:
    name: client-service
  output:
    ansi:
      enabled: always
  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true

  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: jmt_client
            client-secret: 4EpTbwg7S5dTfgtICsQGevVYhUMdzC7Z
            client-name: keycloak
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            scope:
                - openid
                - profile
                - email
          github:
            client-id: 30daa2055b90920902fd
            client-secret: dd917ed10d5841e1ec9b08213bb95f8a386d9510
            client-name: github
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            scope:
              - openid
              - profile
              - email
        provider:
          keycloak:
            issuer-uri: http://host.docker.internal:8080/auth/realms/jmt_realm
            authorization-uri: http://host.docker.internal:8080/auth/realms/jmt_realm/protocol/openid-connect/auth
            token-uri: http://host.docker.internal:8080/auth/realms/jmt_realm/protocol/openid-connect/token
            user-info-uri: http://host.docker.internal:8080/auth/realms/jmt_realm/protocol/openid-connect/userinfo
            jwk-set-uri: http://host.docker.internal:8080/auth/realms/jmt_realm/protocol/openid-connect/certs

eureka:
  client:
    service-url:
      defaultZone: http://eureka:password@localhost:8761/eureka/
    registerWithEureka: true
    fetchRegistry: true

zipkin:
  base-url: http://zipkin:9411/

  management:
    endpoint:
      web:
        exposure:
          include: "*"
    health:
      show-details: always
      circuitbreakers:
        enabled: true
  resilience4j:
    circuit breaker:
      instances:
        user:
          registerHealthIndicator: true
          slidingWindowSize: 5
          eventConsumerBufferSize: 10
          sliding-window-type: COUNT_BASED
          failure-rate-threshold: 50
          wait-duration-in-open-state: 5s
          permitted-number-of-calls-in-half-open-state: 3
          automatic-transition-from-open-to-half-open-enabled: true
