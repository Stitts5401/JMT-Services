spring.jpa.hibernate.ddl-auto=none

spring.r2dbc.url=r2dbc:mysql://@localhost:3307/jmt
spring.r2dbc.password=Password@123
spring.r2dbc.username=ADMIN

# disable health check
management.health.defaults.enabled=false
management.endpoint.health.show-details=always
logging.level.org.springframework.boot.autoconfigure.logging=error
#spring.r2dbc.url=r2dbc:mysql://${DB_USERNAME}:${DB_PASSWORD}@localhost:3306/DATABASE
#
#Here, DB_USERNAME and DB_PASSWORD are environment variables.
#
#Externalized Configuration:
#
#Spring Cloud Config provides server and client-side support for managing application configuration outside your application. This can be useful to externalize your configuration properties and manage them in a centralized server.
#
#Secrets Management Tools:
#
#There are dedicated tools for managing sensitive configuration like:
#
#HashiCorp Vault: This is a popular tool for secrets management. Spring has native integration for Vault through Spring Cloud Vault.
#AWS Secrets Manager or AWS Systems Manager Parameter Store: If you're using AWS, these services allow you to securely store and manage secrets.
#Azure Key Vault: If you're on Azure, Key Vault is a cloud service for securely storing and accessing secrets.
#
#Using such tools, you can securely store, retrieve, and manage secrets, and they often offer features like automatic rotation, auditing, and fine-grained access control.
#
#Encrypt Configuration:
#
#If you need to store secrets in property files (not recommended, but sometimes necessary), Spring offers a way to encrypt and decrypt property values.
#
#Least Privilege Principle:
#
#Always assign the minimum necessary permissions to your database user. If an application only needs to read data, don't give it write or admin rights. This minimizes potential damage in case of a security breach.
#
#Regular Rotation:
#
#Regularly rotate secrets, especially if you believe a secret might have been compromised. Tools like AWS Secrets Manager support automatic rotation.
#
#Monitoring and Auditing:
#
#Regularly monitor and audit access to your secrets and databases. This can help detect unauthorized access attempts or other suspicious activities.
#
#Secure Communication:
#
#Always ensure that the communication between your application and your database is secure, e.g., by using SSL/TLS.
spring.main.allow-bean-definition-overriding=true
logging.level.org.springframework.security=DEBUG